// Copyright (c) 2017-2019 Coinbase Inc. See LICENSE

import CBStore
import RxSwift

/// Persist session secrets
final class SessionStore {
    private let accessQueue = DispatchQueue(label: "WalletLink.SessionStore.accessQueue")
    private let store: StoreProtocol

    required init(store: StoreProtocol = Store()) {
        self.store = store
    }

    /// Get stored sessions
    var sessions: [Session] {
        return getStoredSessions()
    }

    /// Get stored sessions filtered by url
    ///
    /// - Parameters:
    ///     - url: URL to filter sessions
    ///
    /// - Returns: Sessions for given URL
    func getSessions(for url: URL) -> [Session] {
        return getStoredSessions().filter { $0.rpcUrl == url }
    }

    // FIXME: hish - make sure to always check for sesionID and URL as unique key

    func getSession(id: String, url: URL) -> Session? {
        return getStoredSessions().first { $0.rpcUrl == url && $0.id == id }
    }

    /// Store session/secret to keychain
    ///
    /// - Parameters:
    ///     - sessionId: Session ID generated by the host
    ///     - secret: Secret generated by the host
    ///     - rpcURL: WalletLink server websocket URL
    func save(sessionId: String, secret: String, rpcURL: URL) {
        accessQueue.sync {
            var sessions = self.store.get(.sessions)?.items.filter { $0.id != sessionId } ?? []

            sessions.append(Session(id: sessionId, secret: secret, rpcUrl: rpcURL))

            self.store.set(.sessions, value: SessionList(items: sessions))
        }
    }

    /// Deletes sessionId from keychain
    ///
    /// - Parameters:
    ///     - sessionId: Session ID generated by the host
    func delete(sessionId: String) {
        accessQueue.sync {
            let sessions = self.store.get(.sessions)?.items.filter { $0.id != sessionId } ?? []

            self.store.set(.sessions, value: SessionList(items: sessions))
        }
    }

    /// Observe for distinct stored sessionIds update
    ///
    /// - Parameters:
    ///     - url: URL to filter sessions
    ///
    /// - Returns: Session observable for given URL
    func observeSessions(for url: URL) -> Observable<[Session]> {
        return store.observe(.sessions)
            .map { list in list?.items.filter { $0.rpcUrl == url } ?? [] }
            .distinctUntilChanged()
    }

    // MARK: - Private helpers

    private func getStoredSessions() -> [Session] {
        var result: [Session]!

        accessQueue.sync {
            result = self.store.get(.sessions)?.items ?? []
        }

        return result
    }
}
