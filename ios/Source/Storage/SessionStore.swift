// Copyright (c) 2017-2019 Coinbase Inc. See LICENSE

import CBStore
import RxSwift

/// Persist session secrets
final class SessionStore {
    private let accessQueue = DispatchQueue(label: "WalletLink.SessionStore.accessQueue")
    private let store: StoreProtocol

    required init(store: StoreProtocol = Store()) {
        self.store = store
    }

    /// Get stored sessions
    var sessions: [Session] {
        return getStoredSessions()
    }

    /// Get stored sessions filtered by url
    ///
    /// - Parameters:
    ///     - url: URL to filter sessions
    ///
    /// - Returns: Sessions for given URL
    func getSessions(for url: URL) -> [Session] {
        return getStoredSessions().filter { $0.url == url }
    }

    /// Get stored session for given sessionID and rpc URL
    ///
    /// - Parameters:
    ///     - id: Session ID
    ///     - url: URL to filter sessions
    ///
    /// - Returns: Sessions for given URL
    func getSession(id: String, url: URL) -> Session? {
        return getStoredSessions().first { $0.url == url && $0.id == id }
    }

    /// Store session/secret to keychain
    ///
    /// - Parameters:
    ///     - url: WalletLink base URL
    ///     - sessionId: Session ID generated by the host
    ///     - name: Host name
    ///     - secret: Secret generated by the host
    func save(url: URL, sessionId: String, name: String, secret: String) {
        accessQueue.sync {
            var sessions = self.store.get(.sessions)?.items
                .filter { $0.id != sessionId && $0.url == url } ?? []

            sessions.append(Session(id: sessionId, name: name, secret: secret, url: url))

            self.store.set(.sessions, value: SessionList(items: sessions))
        }
    }

    /// Deletes sessionId from keychain
    ///
    /// - Parameters:
    ///     - url: WalletLink server websocket URL
    ///     - sessionId: Session ID generated by the host
    func delete(url: URL, sessionId: String) {
        accessQueue.sync {
            let sessions = self.store.get(.sessions)?.items
                .filter { $0.id != sessionId && $0.url == url } ?? []

            self.store.set(.sessions, value: SessionList(items: sessions))
        }
    }

    /// Observe for distinct stored sessionIds update
    ///
    /// - Parameters:
    ///     - url: URL to filter sessions
    ///
    /// - Returns: Session observable for given URL
    func observeSessions(for url: URL) -> Observable<[Session]> {
        return store.observe(.sessions)
            .map { list in list?.items.filter { $0.url == url }.sorted { $0.id > $1.id } ?? [] }
            .distinctUntilChanged()
    }

    /// Set the timestamp when the session was last refreshed
    ///
    /// - Parameters:
    ///   - timestamp: The most recent requests timestamp for a given session
    ///   - sessionId: The session ID
    func setTimestamp(_ timestamp: UInt64, for sessionId: String) {
        store.set(.requestsFetchToken(sessionId: sessionId), value: timestamp)
    }

    /// Get the timestamp when the session was last refreshed.
    ///
    /// - Parameter sessionId: The session ID
    ///
    /// - Returns: The date when the session was last refreshed. Nil will be returned if the session has never
    ///            been refreshed
    func getTimestamp(for sessionId: String) -> UInt64? {
        return store.get(.requestsFetchToken(sessionId: sessionId))
    }

    // MARK: - Private helpers

    private func getStoredSessions() -> [Session] {
        return accessQueue.syncGet { (self.store.get(.sessions)?.items ?? []).sorted { $0.id > $1.id } }
    }
}
